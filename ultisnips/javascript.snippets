snippet if
if (${1:}) {
  ${2:}
}
endsnippet

snippet ife
if (${1:}) {
  ${2:}
} else {
}
endsnippet

snippet else
else {
	${1:}
}
endsnippet

snippet fun
function(${1:}) {
	${2:}
}
endsnippet


# type cast
snippet css
	goog.getCssName('${1:}')
endsnippet

# type cast
snippet /**
/**
 * ${1:}
 */
endsnippet

snippet base
	goog.base(this, '${1:method}');
endsnippet

snippet private
/**
 * @type {${1:}}
 * @private
 */
this.${2:membername}_ = new $1();
endsnippet

snippet @m
	/** @type {${1:}} */
	this.${2:membername} = new $1();
endsnippet

snippet @param
@param {${1:type}} ${2:name} ${3:description}
endsnippet

snippet @const
/** @const */
${1:variable}
endsnippet

snippet @type
	/** @type {${1:typename}} */ (${2}
endsnippet

snippet @st
/**
 * @type {string}
 * @private
 */
this.${1:membername} = ${2:''};
endsnippet

snippet @nt
/**
 * @type {number}
 * @private
 */
this.${1:membername} = ${2:0};
endsnippet

snippet @bt
/**
 * @type {boolean}
 * @private
 */
this.${1:membername} = true;
endsnippet

snippet @arr
/**
 * @type {Array.<${1:typename}>}
 */
this.${2:membername} = ${3:[]};
endsnippet

snippet @dt
/** @type {goog.date.Date} */
this.${1:membername} = ext.consts.DATENEGATIVEINF.clone();
endsnippet

# Create skeleton of new class.
snippet ext.type
	/**
	 * @constructor
	 */
	ext.type.${1:class name} = function() {
	  /** @type {string} */
	  this.id_j = ext.consts.NULL_UUID;
	  /** @type {string} */
	  this.name_j = ext.consts.UNUSED;
	  /** @type {goog.date.Date} */
	  this.contract_date_j = ext.consts.DATENEGATIVEINF.clone();
		// examples above.
		// snippets:
		//		@dt - date type
		//		@st - declare string
		//		@ut - uid string
		//		@nt - number
		//		@bt - boolean type
		//		@arr - array type
	};

	/**
	 * @param {ext.type.$1=} opt_json_obj Source json object.
	 * @return {!ext.type.$1} Cloned object.
	 */
	ext.type.$1.prototype.clone = function(opt_json_obj) {
	  var source = opt_json_obj || this;
	  var newObj = new ext.type.$1();
	  newObj.id_j = source.id_j;
		// clone members here by snippets:
		//		cd - date types.
		//		cm - clone member.
		//		co - clone object.
		//		ca - clone array.
		return newObj;
	};

	/**
	 * @param {ext.type.$1} other The other object to compare.
	 * @return {boolean} True if both are equal.
	 */
	ext.type.$1.prototype.equals = function(other) {
	  return (
	      this.id_j == other.id_j &&
	      this.contract_date_j.equals(other.contract_date_j)
				// Examples above
				));
	};
	
	/**
	 * Convert dates in the object from string to real javascript Date object.
	 */
	ext.type.$1.prototype.datesToJson = function() {
	  if (!this) { return; }
		// Use @dd snippet to convert a member to date.
	}
endsnippet

# clone member
snippet cm
	newObj.${1:memberName} = source.$1;
	cm${2}
endsnippet

# clone object
snippet co
	if (goog.isFunction(source.${1:membername}.clone)) {
		newObj.$1 = source.$1.clone();
	} else {
		newObj.$1 = ${2:membername}.prototype.clone(
		    /** @type {$2} */ (source.$1));
	}
endsnippet

# clone date
snippet cd
	if (source.${1:membername}.clone) {
		newObj.$1 = source.$1.clone();
	} else {
		newObj.$1 = goog.date.fromIsoString(
			/** @type {string} */ (source.$1));
	}
endsnippet

# clone array
snippet ca
	goog.array.forEach(source.${1:membername}, function(src, index) {
		if (goog.isFunction(src.clone)) {
	    newObj.$1[index] = src.clone();
	  } else {
	    newObj.$1[index] =
	        ext.type.${2:memberType}.prototype.clone(src);
	  }
	});
endsnippet

# equal memebers
snippet em
	this.${1:memberName} == other.$1 &&
	em${2}
endsnippet

# datesToJson date
snippet dd
	if (this.${1:membername} &&
		typeof this.$1 !== "string") {
		this.$1 = (this.$1.toIsoString());
	}
endsnippet



# functor with this
snippet fr
	/**
	 * @type {function(this:${1:this type}, ${2:param name}:${3:param type})}
	 */
	function($2) {
		${5:}
	}${4:, this});
endsnippet

# Node promisify
snippet np
zp.node.promise(goog.partial(${1:},${2:}))${3:}
endsnippet

snippet @eb
@type {zp.EventBus} eventBus Event bus.
endsnippet

snippet @peb
/**
 * @type {zp.EventBus}
 * @private
 */
this.eventBus_ = eventBus;
endsnippet
